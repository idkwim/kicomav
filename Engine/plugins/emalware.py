# -*- coding:utf-8 -*-
# Made by Kei Choi(hanul93@gmail.com)

import os # 파일 삭제를 위해 import
import kernel
import pefile # PE 파일 포맷을 위해 import
import hashlib
import glob
import kavutil

#---------------------------------------------------------------------
# KavMain 클래스
# 키콤백신 엔진 모듈임을 나타내는 클래스이다.
# 이 클래스가 없으면 백신 엔진 커널 모듈에서 로딩하지 않는다.
#---------------------------------------------------------------------
class KavMain :
    #-----------------------------------------------------------------
    # init(self, plugins)
    # 백신 엔진 모듈의 초기화 작업을 수행한다.
    #-----------------------------------------------------------------
    def init(self, plugins) : # 백신 모듈 초기화
        self.plugins = plugins
        self.ptn        = []
        self.iptn       = {}
        self.__signum__ = 0
        self.__date__   = 0
        self.__time__   = 0

        max_date = 0
        vdb = kavutil.VDB()

        flist = glob.glob(plugins + os.sep +'emalware.c*')
        for i in range(len(flist)) :
            fname = flist[i]
            
            # 패턴 로딩
            self.ptn.append(vdb.Load(fname))

            if self.ptn[i] == None :
                return 1 # 패턴 로딩 실패

            self.__signum__ += vdb.GetSigNum()

            # 최신 날짜 구하기
            t_d = vdb.GetDate()
            t_t = vdb.GetTime()

            t_date = (t_d << 16) + t_t
            if max_date < t_date :
                self.__date__ = t_d
                self.__time__ = t_t
                max_date = t_date

        return 0

    #-----------------------------------------------------------------
    # uninit(self)
    # 백신 엔진 모듈의 종료화 작업을 수행한다.
    #-----------------------------------------------------------------
    def uninit(self) : # 백신 모듈 종료화
        return 0

    #-----------------------------------------------------------------
    # scan(self, filehandle, filename)
    # 악성코드를 검사한다.
    # 인자값 : mmhandle         - 파일 mmap 핸들
    #        : scan_file_struct - 파일 구조체
    #        : format           - 미리 분석된 파일 포맷
    # 리턴값 : (악성코드 발견 여부, 악성코드 이름, 악성코드 ID) 등등
    #-----------------------------------------------------------------
    def scan(self, mmhandle, scan_file_struct, format) :
        ret_value = {}
        ret_value['result']     = False # 바이러스 발견 여부
        ret_value['virus_name'] = ''    # 바이러스 이름
        ret_value['scan_state'] = kernel.NOT_FOUND # 0:없음, 1:감염, 2:의심, 3:경고
        ret_value['virus_id']   = -1    # 바이러스 ID

        try : # 백신 엔진의 오류를 방지하기 위해 예외 처리를 선언 
            # 미리 분석된 파일 포맷중에 pe 포맷이 있는가?
            fformat = format['ff_pe']

            mm = mmhandle # 파일 mmap 핸들을 mm에 저장
            fsize = len(mm)

            if scan_file_struct['signature'] == True : # 시그너처 생성
                filename = scan_file_struct['real_filename']
                fname = os.path.basename(filename)
                md5 = hashlib.md5()
                md5.update(mm)
                sigtool = '[emalware] %d:%s:%s' % (fsize, md5.hexdigest(), fname)
                #ret_value['signature'] = sigtool
                print sigtool

            i_num = -1

            fmd5 = None
            for i in range(len(self.ptn)) :
                vpattern = self.ptn[i]

                try :
                    t = vpattern[fsize] # 패턴 중에 파일 크기로 된 MD5가 존재하나?

                    if fmd5 == None :
                        # 존재한다면 MD5 생성
                        md5 = hashlib.md5()
                        md5.update(mm)
                        fmd5 = md5.hexdigest().decode('hex')

                    # MD5의 6자리 내용이 일치하는지 조사
                    id = t[fmd5[0:6]]
                    
                    # 나머지 10자리도 비교해야 함
                    i_num = id[0]   # emalware.iXX 파일에..
                    i_list = id[1]  # 몇번째 리스트인지 알게 됨
                except :
                    pass

                if i_num != -1 : # MD5 6자리와 일치하는 것을 발견 되었다면
                    try :
                        e_vlist = self.iptn[i_num]
                    except :
                        fname = '%s%semalware.i%02d' % (self.plugins, os.sep, i_num)
                        vdb = kavutil.VDB() # 패턴 로딩
                        e_vlist = vdb.Load(fname)

                    if e_vlist != None :
                        self.iptn[i_num] = e_vlist

                        md5_10 = e_vlist[i_list][0] # MD5 10자리
                        vname = e_vlist[i_list][1]  # 바이러스 이름

                        if md5_10 == fmd5[6:] :
                            # 맞다면 검사 결과와 이름, ID를 리턴
                            ret_value['result']     = True             # 바이러스 발견 여부
                            ret_value['virus_name'] = vname # 바이러스 이름
                            ret_value['scan_state'] = kernel.INFECTED # 0:없음, 1:감염, 2:의심, 3:경고
                            ret_value['virus_id']   = 0                # 바이러스 ID
                            return ret_value

        except : # 모든 예외사항을 처리
            pass

        # 악성코드를 발견하지 못했음을 리턴한다.
        return ret_value

    #-----------------------------------------------------------------
    # disinfect(self, filename, malwareID)
    # 악성코드를 치료한다.
    # 인자값 : filename   - 파일 이름
    #        : malwareID  - 치료할 악성코드 ID
    # 리턴값 : 악성코드 치료 여부
    #-----------------------------------------------------------------
    def disinfect(self, filename, malwareID) : # 악성코드 치료
        return False # 치료 실패 리턴

    #-----------------------------------------------------------------
    # listvirus(self)
    # 진단/치료 가능한 악성코드의 목록을 알려준다.
    #-----------------------------------------------------------------
    def listvirus(self) :
        vlist = [] # 리스트형 변수 선언


        flist = glob.glob(self.plugins + os.sep +'emalware.i*')
        for fname in flist :
            vdb = kavutil.VDB()

            # 패턴 로딩
            e_vlist = vdb.Load(fname)

            if e_vlist != None :
                for vpattern in e_vlist :
                    vlist.append(vpattern[1])

            del vdb

        return vlist

    #-----------------------------------------------------------------
    # getinfo(self)
    # 백신 엔진 모듈의 주요 정보를 알려준다. (버전, 제작자...)
    #-----------------------------------------------------------------
    def getinfo(self) :
        info = {} # 사전형 변수 선언
        info['author'] = 'Kei Choi' # 제작자
        info['version'] = '1.0'     # 버전
        info['title'] = 'eMalware Engine' # 엔진 설명
        info['kmd_name'] = 'emalware' # 엔진 파일명

        # 패턴 생성날짜와 시간은 없다면 빌드 시간으로 자동 설정
        info['date']    = self.__date__   # 패턴 생성 날짜 
        info['time']    = self.__time__   # 패턴 생성 시간 
        info['sig_num'] = self.__signum__ # 패턴 수

        return info

